{"trial_id": "0146", "hyperparameters": {"space": [{"class_name": "Int", "config": {"name": "conv_filters", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 16, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "conv_kernel_size", "default": null, "conditions": [], "min_value": 2, "max_value": 5, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "max_pool_size", "default": null, "conditions": [], "min_value": 2, "max_value": 4, "step": 1, "sampling": "linear"}}, {"class_name": "Int", "config": {"name": "dense_units", "default": null, "conditions": [], "min_value": 32, "max_value": 128, "step": 16, "sampling": "linear"}}, {"class_name": "Choice", "config": {"name": "learning_rate", "default": 0.001, "conditions": [], "values": [0.001, 0.01, 0.1], "ordered": true}}], "values": {"conv_filters": 64, "conv_kernel_size": 5, "max_pool_size": 4, "dense_units": 80, "learning_rate": 0.001, "tuner/epochs": 4, "tuner/initial_epoch": 0, "tuner/bracket": 3, "tuner/round": 0}}, "metrics": {"metrics": {}}, "score": null, "best_step": 0, "status": "FAILED", "message": "Traceback (most recent call last):\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 273, in _try_run_and_update_trial\n    self._run_and_update_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/engine/base_tuner.py\", line 238, in _run_and_update_trial\n    results = self.run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/tuners/hyperband.py\", line 427, in run_trial\n    return super().run_trial(trial, *fit_args, **fit_kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 314, in run_trial\n    obj_value = self._build_and_fit_model(trial, *args, **copied_kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 232, in _build_and_fit_model\n    model = self._try_build(hp)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 164, in _try_build\n    model = self._build_hypermodel(hp)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/tuners/hyperband.py\", line 430, in _build_hypermodel\n    model = super()._build_hypermodel(hp)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras_tuner/src/engine/tuner.py\", line 155, in _build_hypermodel\n    model = self.hypermodel.build(hp)\n  File \"/var/folders/rm/dhdy1ky15bv6bj2pp9z5tlh80000gn/T/ipykernel_23367/4061026989.py\", line 8, in build_cnn_model\n    model.add(MaxPooling1D(pool_size=hp.Int('max_pool_size', min_value=2, max_value=4, step=1)))\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/tensorflow/python/trackable/base.py\", line 204, in _method_wrapper\n    result = method(self, *args, **kwargs)\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras/src/utils/traceback_utils.py\", line 70, in error_handler\n    raise e.with_traceback(filtered_tb) from None\n  File \"/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/site-packages/keras/src/backend.py\", line 6644, in pool2d\n    x = tf.compat.v1.nn.max_pool(\nValueError: Exception encountered when calling layer \"max_pooling1d\" (type MaxPooling1D).\n\nNegative dimension size caused by subtracting 4 from 3 for '{{node max_pooling1d/MaxPool}} = MaxPool[T=DT_FLOAT, data_format=\"NHWC\", explicit_paddings=[], ksize=[1, 4, 1, 1], padding=\"VALID\", strides=[1, 4, 1, 1]](max_pooling1d/ExpandDims)' with input shapes: [?,3,1,64].\n\nCall arguments received by layer \"max_pooling1d\" (type MaxPooling1D):\n  \u2022 inputs=tf.Tensor(shape=(None, 3, 64), dtype=float32)\n"}